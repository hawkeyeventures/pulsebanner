name: Deploy to production
# This workflow builds Docker images for each app, then pushes the images to GitHub Container Registry
# After all images are built and pushed successfully, it deploys each image to Caprover (production)

on:
    release: # https://docs.github.com/en/actions/learn-github-actions/events-that-trigger-workflows#release
        types: [published] # GITHUB_REF Tag of release
    workflow_dispatch:

jobs:
    build_next:
        name: Build next
        runs-on: ubuntu-latest
        environment: Production
        permissions:
            contents: read
            packages: write
        outputs:
            # output the image tag that was built and pushed so we can deploy this image tag in the deploy job
            image-tag: ${{ steps.set-image-tag.outputs.image-tag }}
        steps:
            #
            # ------------------ Setup -----------------------
            #

            # checkout GitHub repository
            - name: Checkout
              uses: actions/checkout@v2

            # install QEMU, a utility for building docker images
            - name: Set up QEMU
              uses: docker/setup-qemu-action@v1
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v1
            - name: Login to GitHub Container Registry
              uses: docker/login-action@v1
              with:
                  registry: ghcr.io
                  username: ${{ github.repository_owner }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            # Install and setup Node.JS
            - name: Setup node
              uses: actions/setup-node@v2
              with:
                  node-version: '16'

            # Install npm dependencies
            - name: Install and cache dependencies
              uses: bahmutov/npm-install@v1

            #
            #
            # ------------------  Build NextJS (frontend + API) -----------------------
            #
            #

            - name: Lint Next.js app
              run: npx nx run next:lint

            - name: 'nx run next:make:ci'
              run: npx nx run next:make:ci
              env:
                  INPUT_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}
                  NEXT_PUBLIC_UMAMI_WEBSITE_ID: ${{ secrets.NEXT_PUBLIC_UMAMI_WEBSITE_ID }}
                  NEXT_PUBLIC_UMAMI_SRC: ${{ secrets.NEXT_PUBLIC_UMAMI_SRC }}

            # This creates docker tags
            # https://github.com/docker/build-push-action/blob/master/docs/advanced/tags-labels.md
            - name: Docker meta
              id: next-meta
              uses: docker/metadata-action@v3
              with:
                  # list of Docker images to use as base name for tags
                  images: |
                      ghcr.io/streamlux/pulsebanner-next
                  # generate Docker tags based on the following events/attributes
                  tags: |
                      type=semver,priority=900,pattern={{version}},prefix=prod-

            - name: 'Build and push NextJS image'
              uses: docker/build-push-action@v2
              with:
                  file: 'apps/next/Dockerfile'
                  context: '.'
                  platforms: linux/amd64
                  push: true
                  tags: ${{ steps.next-meta.outputs.tags }}
                  labels: ${{ steps.next-meta.outputs.labels }}

            - name: 'prisma migrate deploy'
              run: npx prisma migrate deploy
              env:
                  DATABASE_URL: ${{ secrets.DATABASE_URL }}

            - id: set-image-tag
              run: echo "::set-output name=image-tag::${{ fromJson(steps.next-meta.outputs.json).tags[0] }}"

    build_nest:
        name: Build nest
        runs-on: ubuntu-latest
        environment: Production
        permissions:
            contents: read
            packages: write
        outputs:
            # output the image tag that was built and pushed so we can deploy this image tag in the deploy job
            image-tag: ${{ steps.set-image-tag.outputs.image-tag }}
        steps:
            #
            # ------------------ Setup -----------------------
            #

            # checkout GitHub repository
            - name: Checkout
              uses: actions/checkout@v2

            # install QEMU, a utility for building docker images
            - name: Set up QEMU
              uses: docker/setup-qemu-action@v1
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v1
            - name: Login to GitHub Container Registry
              uses: docker/login-action@v1
              with:
                  registry: ghcr.io
                  username: ${{ github.repository_owner }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            # Install and setup Node.JS
            - name: Setup node
              uses: actions/setup-node@v2
              with:
                  node-version: '16'

            # Install npm dependencies
            - name: Install and cache dependencies
              uses: bahmutov/npm-install@v1

            #
            #
            # ------------------ Build NestJS (API) -----------------------
            #
            #

            - name: Lint Nest.js
              run: npx nx run nest:lint

            - name: 'nx run nest:build:production'
              run: npx nx run nest:build:production

            # Creates docker tags for NestJS image
            # https://github.com/docker/build-push-action/blob/master/docs/advanced/tags-labels.md
            - name: Docker meta
              id: nest-meta
              uses: docker/metadata-action@v3
              with:
                  # list of Docker images to use as base name for tags
                  images: |
                      ghcr.io/streamlux/pulsebanner-nest
                  # generate Docker tags based on the following events/attributes
                  tags: |
                      type=semver,priority=900,pattern={{version}},prefix=prod-

            - name: 'Build and push NestJS image'
              uses: docker/build-push-action@v2
              with:
                  file: 'apps/nest/Dockerfile'
                  context: '.'
                  platforms: linux/amd64
                  push: true
                  tags: ${{ steps.nest-meta.outputs.tags }}
                  labels: ${{ steps.nest-meta.outputs.labels }}

            - id: set-image-tag
              run: echo "::set-output name=image-tag::${{ fromJson(steps.nest-meta.outputs.json).tags[0] }}"

    build_remotion:
        name: Build remotion
        runs-on: ubuntu-latest
        environment: Production
        permissions:
            contents: read
            packages: write
        outputs:
            # output the image tag that was built and pushed so we can deploy this image tag in the deploy job
            image-tag: ${{ steps.set-image-tag.outputs.image-tag }}
        steps:
            #
            # ------------------ Setup -----------------------
            #

            # checkout GitHub repository
            - name: Checkout
              uses: actions/checkout@v2

            # install QEMU, a utility for building docker images
            - name: Set up QEMU
              uses: docker/setup-qemu-action@v1
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v1
            - name: Login to GitHub Container Registry
              uses: docker/login-action@v1
              with:
                  registry: ghcr.io
                  username: ${{ github.repository_owner }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            # Install and setup Node.JS
            - name: Setup node
              uses: actions/setup-node@v2
              with:
                  node-version: '16'

            # Install npm dependencies
            - name: Install and cache dependencies
              uses: bahmutov/npm-install@v1

            #
            #
            # ------------------ Build Remotion (API) -----------------------
            #
            #

            # https://github.com/docker/build-push-action/blob/master/docs/advanced/tags-labels.md
            - name: Docker meta
              id: remotion-meta
              uses: docker/metadata-action@v3
              with:
                  # list of Docker images to use as base name for tags
                  images: |
                      ghcr.io/streamlux/pulsebanner-remotion
                  # generate Docker tags based on the following events/attributes
                  tags: |
                      type=semver,priority=900,pattern={{version}},prefix=prod-

            - name: Lint Remotion server
              run: npx nx run remotion:lint

            - name: 'Install ts-node'
              run: npm i -g ts-node

            - name: 'Build remotion app'
              run: npx ts-node apps/remotion/scripts/build.ts

            - name: Build and push
              uses: docker/build-push-action@v2
              with:
                  context: 'dist/apps/remotion'
                  platforms: linux/amd64
                  push: true
                  tags: ${{ steps.remotion-meta.outputs.tags }}
                  labels: ${{ steps.remotion-meta.outputs.labels }}

            - id: set-image-tag
              run: echo "::set-output name=image-tag::${{ fromJson(steps.remotion-meta.outputs.json).tags[0] }}"

    deploy_production:
        name: Deploy to Production
        runs-on: ubuntu-latest
        needs: [build_next, build_nest, build_remotion]
        environment: Production
        concurrency: Production

        env:
            CAPROVER_URL: ${{ secrets.CAPROVER_URL }}
            NEST_CAPROVER_APP_TOKEN: ${{ secrets.NEST_CAPROVER_APP_TOKEN }}
            NEXT_CAPROVER_APP_TOKEN: ${{ secrets.NEXT_CAPROVER_APP_TOKEN }}
            REMOTION_CAPROVER_APP_TOKEN: ${{ secrets.REMOTION_CAPROVER_APP_TOKEN }}

        strategy:
            matrix:
                include:
                    - app: nest # name of the app in Caprover
                      token-key: NEST_CAPROVER_APP_TOKEN # key used to get CAPROVER_APP_TOKEN from env
                      image: ${{ needs.build_nest.outputs.image-tag }} # image to deploy
                    - app: next
                      token-key: NEXT_CAPROVER_APP_TOKEN
                      image: ${{ needs.build_next.outputs.image-tag }}
                    - app: remotion
                      token-key: REMOTION_CAPROVER_APP_TOKEN
                      image: ${{ needs.build_remotion.outputs.image-tag }}

        steps:
            # Install Caprover CLI, which we use to deploy images to Caprover
            - name: 'Install caprover-cli'
              run: npm install -g caprover

            # Deploy each app by iterating over matrix values
            - name: 'Deploy ${{ matrix.app }}'
              env:
                  APP_NAME: ${{ matrix.app }}
                  APP_URL: ${{ env.CAPROVER_URL }}
                  CAPROVER_APP_TOKEN: ${{ env[matrix.token-key] }}
                  IMAGE_NAME: ${{ matrix.image }}
              run: 'caprover deploy --caproverUrl=$APP_URL --imageName=$IMAGE_NAME --appName=$APP_NAME'
