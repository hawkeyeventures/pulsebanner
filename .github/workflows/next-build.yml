name: Build Next.js app
# This workflow is triggered on pushes to the repository.
on:
    # Trigger the workflow on push or pull request,
    # but only for the main branch
    push:
        branches:
            - main
    workflow_dispatch:

jobs:
    deploy_next:
        name: Build and deploy Next.js app
        runs-on: ubuntu-latest
        environment: Staging
        concurrency: Staging
        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - name: Get branch name (merge)
              if: github.event_name != 'pull_request'
              shell: bash
              run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

            - name: Get branch name (pull request)
              if: github.event_name == 'pull_request'
              shell: bash
              run: echo "BRANCH_NAME=$(echo ${GITHUB_HEAD_REF} | tr / -)" >> $GITHUB_ENV

            # https://github.com/docker/build-push-action/blob/master/docs/advanced/tags-labels.md
            - name: Docker meta
              id: meta
              uses: docker/metadata-action@v3
              with:
                  # list of Docker images to use as base name for tags
                  images: |
                      ghcr.io/streamlux/pulsebanner-next
                  # generate Docker tags based on the following events/attributes
                  tags: |
                      type=sha,prefix=${{ env.BRANCH_NAME }}-,priority=1000
                      type=semver,priority=900,pattern={{version}},prefix=staging-

            # install and setup Node.JS
            - name: Setup node
              uses: actions/setup-node@v2
              with:
                  node-version: "16"

            - name: Install and cache dependencies
              uses: bahmutov/npm-install@v1

            - name: Lint Next.js app
              run: npx nx run next:lint

            - name: "nx run next:make:ci"
              run: npx nx run next:make:ci
              env:
                  INPUT_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}
                  NEXT_PUBLIC_UMAMI_WEBSITE_ID: ${{ secrets.NEXT_PUBLIC_UMAMI_WEBSITE_ID }}
                  NEXT_PUBLIC_UMAMI_SRC: ${{ secrets.NEXT_PUBLIC_UMAMI_SRC }}

            # install QEMU, a utility for building docker images
            - name: Set up QEMU
              uses: docker/setup-qemu-action@v1
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v1
            - name: Login to GitHub Container Registry
              uses: docker/login-action@v1
              with:
                  registry: ghcr.io
                  username: ${{ github.repository_owner }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Build and push
              uses: docker/build-push-action@v2
              with:
                  file: "apps/next/Dockerfile"
                  context: "."
                  platforms: linux/amd64
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}

            - name: "prisma migrate deploy"
              run: npx prisma migrate deploy
              env:
                  DATABASE_URL: ${{ secrets.DATABASE_URL }}

            - name: "Install caprover-cli"
              run: npm install -g caprover

            - name: "Deploy to Caprover"
              env:
                  CAPROVER_APP_TOKEN: ${{ secrets.NEXT_CAPROVER_APP_TOKEN }}
                  APP_URL: ${{ secrets.CAPROVER_URL }}
                  APP_NAME: ${{ secrets.NEXT_APP_NAME }}
                  IMAGE_NAME: ${{ fromJson(steps.meta.outputs.json).tags[0] }}
              run: "caprover deploy --caproverUrl=$APP_URL --imageName=$IMAGE_NAME --appName=$APP_NAME"

            # https://github.com/docker/build-push-action/blob/master/docs/advanced/tags-labels.md
            - name: Docker meta
              id: remotion-meta
              uses: docker/metadata-action@v3
              with:
                  # list of Docker images to use as base name for tags
                  images: |
                      ghcr.io/streamlux/pulsebanner-remotion
                  # generate Docker tags based on the following events/attributes
                  tags: |
                      type=sha,prefix=${{ env.BRANCH_NAME }}-,priority=1000
                      type=semver,priority=900,pattern={{version}},prefix=staging-

            - name: Lint Remotion server
              run: npx nx run remotion:lint

            - name: "Install ts-node"
              run: npm i -g ts-node

            - name: "Build remotion app"
              run: npx ts-node apps/remotion/scripts/build.ts

            - name: Build and push
              uses: docker/build-push-action@v2
              with:
                  context: "dist/apps/remotion"
                  platforms: linux/amd64
                  push: true
                  tags: ${{ steps.remotion-meta.outputs.tags }}
                  labels: ${{ steps.remotion-meta.outputs.labels }}

            - name: "Deploy to Caprover"
              env:
                  CAPROVER_APP_TOKEN: ${{ secrets.REMOTION_CAPROVER_APP_TOKEN }}
                  APP_URL: ${{ secrets.CAPROVER_URL }}
                  APP_NAME: ${{ secrets.REMOTION_APP_NAME }}
                  IMAGE_NAME: ${{ fromJson(steps.remotion-meta.outputs.json).tags[0] }}
              run: "caprover deploy --caproverUrl=$APP_URL --imageName=$IMAGE_NAME --appName=$APP_NAME"
